Esercizio c.1:

scrivere il monitor mMbb che realizzi un meccanismo di un minmax bounded buffer.
Dopo le prime MIN operazioni di scrittura, un minmax bounded buffer deve sempre avere almeno MIN elementi e mai piu' di MAX
elementi (e' quindi limitato sia nell'ampiezza massima, sia nell'ampiezza minima).
Le funzioni (procedure entry) read e write del minmax bounded buffer hanno gli stessi argomenti e valori di ritorno di quelle del
producer/consumer o del bounded buffer ordinario. 

Svolgimento:

monitor mMbb{
    int MIN = ...
    int MAX = ...
    condition ok2write, ok2read;
    queue buf;

    entry void write(generic_type value){
        if(buf.length == MAX) ok2write.wait();
        buf.enqueue(value);
        if(buf.length > MIN) ok2read.signal();
    }

    entry generic_type read(){
        if(buf.length <= MIN) ok2read.wait();
        value = buf.dequeue();
        ok2write.signal();                          //se uno è stato tolto sicuramente posso scrivere
        return value;
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Esercizio c.2: 

Facendo uso di semafori scrivere la funzione rendezvous che consenta ai processi di sincronizzarsi secondo le
seguenti specifiche:
– Ogni processo indica come parametro della funzione rendezvous con quanti altri processi vuole sincronizzarsi.
– M processi che chiamano la rendezvous con parametro N rimangono bloccati se M<N.
– Quando l'N-mo processo richiama la rendezvous specificando N come parametro, lui e gli N-1 sospesi devono proseguire
nelle propria esecuzione

Svolgimento:

struct list{
    int val;
    int num;
    semlist sl;
    list*next;
}
struct semlist{
    semaphore sem;
    semlist*next;
}

sem mutex(1);
list* list

function rendevouz( int N ){
    mutex.P();
    elem = findElementWithValue(list,N)
    if(elem){
        elem.num++;
        if(num == N){
            e = elem.semlist;
            for(int i=0; i<N; i++){
                e.sem.V();
                e = e.next;
            }
            removeElement(list,N)
        }else{
            semaphore sem;
            insertNew(elem.semlist, sem);
            mutex.V();
            sem.P();
        } 
    }else{
        addElement(list,N);
    }
}

void addElement(list,N){
    copy = list
    while(copy->next != NULL) copy = copy -> next;
    copy->next = new list()
    copy = copy->next;
    copy->next=NULL;
    copy->val = N;
    copy->num = 1;
    copy->semlist = new semlist()
    copy->semlist->next = NULL;
    s = new semaphore(0)
    copy->semlist -> sem = s;
    mutex.V()
    s.P();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Esercizio g.1: 

Siano dati una memoria con 4 frame {0,1,2,3} e un unico processo che usa 5 pagine {0,1,2,3,4} eseguito tramite
memoria virtuale (con paginazione a richiesta) su tale memoria.
a- Usando l'algoritmo di rimpiazzamento LRU si costruisca la più corta stringa di riferimenti che inizi con 2,3,4,0 e che al termine
abbia la pagina 0 nel frame 0, la pagina 1 nel frame 1, la pagina 2 nel frame 2, la pagina 3 nel frame 3, o si dimostri che tale stringa
non esiste.
b- Usando l'algoritmo di rimpiazzamento FIFO si costruisca la più corta stringa di riferimenti che inizi con 2,3,4,0 e che al termine
abbia la pagina 0 nel frame 0, la pagina 1 nel frame 1, la pagina 2 nel frame 2, la pagina 3 nel frame 3, o si dimostri che tale stringa
non esiste.
c- Usando l'algoritmo di rimpiazzamento FIFO si costruisca la più corta stringa di riferimenti che inizi con 2,3,4,0 e che al termine
abbia la pagina 3 nel frame 0, la pagina 2 nel frame 1, la pagina 1 nel frame 2, la pagina 0 nel frame 3, o si dimostri che tale stringa
non esiste.

Svolgimento:

a) 

    Stringa:    2   3   4   0   1   2   3   4   0   1   2   3  

        LRU:    2   2   2   2   1   1   1   1   0   0   0   0
                    3   3   3   3   2   2   2   2   1   1   1
                        4   4   4   4   3   3   3   3   2   2
                            0   0   0   0   4   4   4   4   3

b)  Non avendo duplicato gli accessi nel primo caso, la stringa risulta uguale con FIFO

    Stringa:    2   3   4   0   1   2   3   4   0   1   2   3  

       FIFO:    2   2   2   2   1   1   1   1   0   0   0   0
                    3   3   3   3   2   2   2   2   1   1   1
                        4   4   4   4   3   3   3   3   2   2
                            0   0   0   0   4   4   4   4   3

c)

    Stringa:    2   3   4   0   1   2   3   4   0   1   2   3   4   0   1   2   3       

       FIFO:    2   2   2   2   1   1   1   1   0   0   0   0   4   4   4   4   3
                    3   3   3   3   2   2   2   2   1   1   1   1   0   0   0   0  
                        4   4   4   4   3   3   3   3   2   2   2   2   1   1   1
                            0   0   0   0   4   4   4   4   3   3   3   3   2   2

    Non si può fare 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Esercizio g.2:

a) quale supporto hardware e' necessario per implementare un meccanismo di memoria virtuale tramite paginazione a richiesta?
Perche'?

    è necessaro un bit extra che indichi se la pagina è in memoria secondaria o primaria. Dopo di che se la pagina è in memoria secondaria
    si passa il controllo al pager che gestisce il page fault.

b) quale supporto hardware e' necessario per l'impementazione di uno scheduler round robin? Perche'?

    Per l'implementazione di RR è necessario un timer che mandi un segnale alla cpu allo scadere del time slice

c) quale supporto hardware e' necessario per implementare un algoritmo di rimpiazzamento LFU? Perche'?
    
    Serve un contatore delle occorrenze che ci permetta di sapere quante volte una pagina è stata utilizzata.
    O alternativamente si può usare uno stack a doppia testa.