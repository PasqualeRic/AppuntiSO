Esercizio c.1: 

Il monitor "semaforo con timeout" semtimeout deve fornire tre procedure entry:
void V(void)
boolean P(unsigned int timeout)
void tick(void)
Vale l'invariante dei semafori generali. La funzione tick viene richiamata ad ogni millisecondo. Un processo messo in
attesa a causa di una P attende al massimo il numero di millisecondi indicato nel parametro.
Se un processo viene riattivato per timeout la P ritorna valore vero, altrimenti falso. Le operazioni V devono riattivare i
processi in attesa in ordine FIFO.
Scrivere semtimeout.

Svolgimento:

monitor semaforoConTimeout{
    int semValue = 1;
    queue q;                // di oggetti del tipo (condizione, timeout)
    isTimeout = false;
    globalTime = 0;


    entry void V(){
        if(! q.isEmpty()){
            proc = q.dequeue()
            isTimeout = false;
            proc.condition.signal();
        }else{
            semValue++;
        }
    }

    entry boolean P(unsigned int timeout){
        if(semValue < 1){
            semValue--;
            condition = new condition();
            totalTime = globalTime + timeout;
            q.enqueue({condition,timeout:totalTime});
            condition.wait();
            semValue++;
            return isTimeout;
        }else{
            semValue--; 
        }
    }
    
    entry void tick(){
        proc = q.getTmeoutedProc(globalTime);               //this function returns an object {condition,timeout} if theres a process that timeout at globalTime. NULL otherwise 
        while(proc != NULL){                                //the function also remove the object from the queue
            isTimeout = true;
            proc.condition.signal()
            proc = q.getTmeoutedProc(globalTime);
        }
        globalTime++;
    }

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Esercizio c.2: 

Dato un servizio di message passing asincrono scrivere un servizio di message passing sincrono a
spedizione multipla (senza fare uso di processi server). Devono essere previste due funzioni:
mulsend(pid_t destination, T msg, int times)
T mulrecv(pid_t sender)
La chiamata mulsend spedisce il messaggio msg al processo destination times volte. Solo quando il messaggio è
stato ricevuto times volte da destination l'esecuzione della funzione mulsend viene completata.
Il ricevente può indicare il valore zero come sender nella mulrecv per indicare che vuole ricevere un messaggio da
qualsiasi mittente.

Svolgimento:

abbiamo a disposizione asend(msg, dest) e arecv(mitt) con asend non bloccante e arecv bloccante.

mulsend(pid_t destination, T msg, int times){
    for(int i=0; i<times; i++){
        asend(msg:{content:msg,sender:getpid()}, destination)
    }
    asend(msg:stop, destination)
    for(int i=0; i<times; i++){
        ack = arecv(destination)
    }
}

T mulrecv(pid_t sender){
    msg.push(arecv(sender));
    message = msg.head.msg.content;
    realSender = msg.head.msg.sender
    while(msg.top.msg != stop){
        msg.push(arecv(sender));
    }
    for(int i=0; i<msg.length-1;i++){
        asend(ack, realSender);
    }
    return msg;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Esercizio g.1: 

Si consideri l'algoritmo del banchiere a tre valute. Si prenda in considerazione una situazione nella
qualetre processi p1, p2, p3 abbiano un massimo credito disponibile rispettivamente di (3, 2, 3), (3, 3, 2), (2, 3, 3), cioé
peresempio p1 può prendere in prestito 3 unità della prima e della terza valuta ma solo 2 della seconda. In un certo
istante p1 ha 2 unità della prima valuta, p2 ha 2 unità della seconda, p3 ha 3 unità della terza e nessuna altra risorsa è
stata assegnata. Qual è il capitale iniziale minimo che consente allo stato di essere safe? (considerare tutti i casi
possibili e spiegare bene il procedimento.

Svolgimento:

c1: (3, 2, 3)       p1: (2,0,0)     n1: (1,2,3) 
c2: (3, 3, 2)       p2: (0,2,0)     n2: (3,1,2)
c3: (2, 3, 3)       p3: (0,0,3)     n3: (2,3,0)

123: -> 3,2,3 -> 3,4,3 -> 3,4,6 
132: -> 3,2,3 -> 3,2,6 -> 3,5,6
213: -> 3,3,2 -> 5,3,3 -> 5,3,6
231: -> 3,3,2 -> 3,3,5 -> 5,3,5
312: -> 2,3,3 -> 4,3,3 -> 4,5,3
321: -> 2,3,3 -> 3,5,3 -> 5,5,3

se vogliamo essere sicuri che lo stato sia safe per qualunque ordine di esecuzione basta prendere il massimo valore per ogni valuta 
degli elementi elencati, ottenendo (5,5,6)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Esercizio g.2: come nell'esame 2020.02.02